# -*- coding: utf-8 -*-

"""
gumletrestapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

import json
import dateutil.parser

from tests.controllers.controller_test_base import ControllerTestBase
from apimatic_core.utilities.comparison_helper import ComparisonHelper
from gumletrestapis.api_helper import APIHelper
from gumletrestapis.models.video_sources_request import VideoSourcesRequest
from gumletrestapis.models.video_assets_request import VideoAssetsRequest
from gumletrestapis.models.video_assets_upload_request import VideoAssetsUploadRequest
from gumletrestapis.models.video_assets_update_request import VideoAssetsUpdateRequest
from gumletrestapis.models.video_analytics_request import VideoAnalyticsRequest
from gumletrestapis.models.video_profiles_request import VideoProfilesRequest
from gumletrestapis.models.video_playlist_request import VideoPlaylistRequest
from gumletrestapis.models.org_webhooks_request import OrgWebhooksRequest
from gumletrestapis.models.insights_chart_data_request import InsightsChartDataRequest
from gumletrestapis.models.insights_breakdown_data_request import InsightsBreakdownDataRequest
from gumletrestapis.models.insights_aggregated_data_request import InsightsAggregatedDataRequest
from gumletrestapis.models.image_sources_request import ImageSourcesRequest
from gumletrestapis.models.image_analytics_request import ImageAnalyticsRequest
from gumletrestapis.models.video_live_assets_request import VideoLiveAssetsRequest
from gumletrestapis.models.video_live_assets_update_request import VideoLiveAssetsUpdateRequest


class APIEndpointsControllerTests(ControllerTestBase):

    controller = None

    @classmethod
    def setUpClass(cls):
        super(APIEndpointsControllerTests, cls).setUpClass()
        cls.controller = cls.client.api_endpoints
        cls.response_catcher = cls.controller.http_call_back

    # This endpoint list video collection which are assigned to the user or token.
    def test_list_collections(self):

        # Perform the API call through the SDK function
        result = self.controller.list_collections()

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('{"all_sources":[{"id":"646df1c9173a4a2fcac180b4","name":"collectio'
            'n_name","type":"aws","created_at":"2023-05-24T11:15:21.624Z","upda'
            'ted_at":"2024-01-24T11:57:48.744Z","video_protection":{"signed_url'
            '":true,"signed_url_secret":"47a3e2fbb1318f033b882c632bc103a8"},"pl'
            'ayer_config":{"preload":false,"autoplay":false,"disable_seek":fals'
            'e,"disable_player_controls":false,"powered_by_gumlet_overlay":fals'
            'e,"allow_drm_protected_videos":false,"loop":false,"player_color":"'
            '#6658ea","include_seo":true,"subtitle_enabled":false,"pixel_tags":'
            '{},"logo_width":100,"logo_height":100,"dynamic_watermark":false,"w'
            'atermark_font_size":20,"watermark_font_color":"#ff0000","watermark'
            '_bg_color":"transparent","watermark_interval":1000},"default_profi'
            'le_id":"646df1c9173a4a2fcac180b7","insight_property_id":"646df0aa1'
            '73a4a2fcac18009","aws":{"bucket_name":"asd","bucket_region":"ap-so'
            'uth-1","access_key":"Code@123","secret":"****************"},"embed'
            '_details":{"pixel_tags":{},"preload":false,"autoplay":false,"logo_'
            'width":100,"logo_height":100,"player_color":"#6658ea","is_seo":tru'
            'e,"dynamic_watermark":false,"disable_seek":false,"disable_player_c'
            'ontrols":false,"allow_drm_protected_videos":false,"powered_by_guml'
            'et_overlay":false,"loop":false,"subtitle_enabled":false,"watermark'
            '_bg_color":"transparent","watermark_font_color":"#ff0000","waterma'
            'rk_font_size":20,"watermark_interval":1000},"folders":["folder","f'
            'older 2","folder 27","folder 4"],"channel_settings":{"title":"my c'
            'hannel","active":false,"description":"desc","privacy_type":"privat'
            'e","custom_logo":true,"logo_url":"https://dev-video.gumlet.io/646d'
            'f1c9172a4a2fcac180b4/channel/logo.png","cname":["okj.com","sd.com"'
            ',"safd.com"],"temp_cname":["okj.com","safd.com","sd.com"]}},{"id":'
            '"65b016f4e99b77f116c0e381","name":"private uploads","type":"direct'
            '-upload","created_at":"2024-01-23T19:43:48.267Z","updated_at":"202'
            '4-01-23T19:43:48.272Z","video_protection":{},"player_config":{"pre'
            'load":true,"autoplay":false,"disable_seek":false,"disable_player_c'
            'ontrols":false,"powered_by_gumlet_overlay":true,"allow_drm_protect'
            'ed_videos":true,"loop":false,"player_color":"#6658ea","include_seo'
            '":true,"subtitle_enabled":false,"pixel_tags":{},"logo_width":100,"'
            'logo_height":100,"dynamic_watermark":false,"watermark_font_size":2'
            '0,"watermark_font_color":"#ff0000","watermark_bg_color":"transpare'
            'nt","watermark_interval":1000},"default_profile_id":"646df1c9173a4'
            'a2fcac180b7","insight_property_id":"65b016f4e99b77f116c0e37f","emb'
            'ed_details":{"pixel_tags":{},"powered_by_gumlet_overlay":true,"all'
            'ow_drm_protected_videos":true,"preload":true,"autoplay":false,"log'
            'o_width":100,"logo_height":100,"player_color":"#6658ea","is_seo":t'
            'rue,"dynamic_watermark":false,"watermark_font_size":20,"watermark_'
            'font_color":"#ff0000","watermark_bg_color":"transparent","watermar'
            'k_interval":1000,"disable_seek":false,"disable_player_controls":fa'
            'lse,"loop":false,"subtitle_enabled":false},"folders":[],"channel_s'
            'ettings":{"active":false,"privacy_type":"private"}}]}')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body)

    # Video collections are top-level entities in Gumlet. You can use them to organize videos for different teams/departments or use cases.
    def test_create_collection(self):
        # Parameters for the API call
        body = None

        # Perform the API call through the SDK function
        result = self.controller.create_collection(body)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('{"id":"65b01610e99b77f116c0e32b","name":"zoom-collection","type":"'
            'zoom","created_at":"2024-01-23T19:40:00.447Z","updated_at":"2024-0'
            '1-23T19:40:00.447Z","video_protection":{},"player_config":{"preloa'
            'd":true,"autoplay":false,"disable_seek":false,"disable_player_cont'
            'rols":false,"powered_by_gumlet_overlay":true,"allow_drm_protected_'
            'videos":true,"loop":false,"player_color":"#6658ea","include_seo":t'
            'rue,"subtitle_enabled":false,"pixel_tags":{},"logo_width":100,"log'
            'o_height":100,"dynamic_watermark":false,"watermark_font_size":20,"'
            'watermark_font_color":"#ff0000","watermark_bg_color":"transparent"'
            ',"watermark_interval":1000},"default_profile_id":"646df1c9173a4a2f'
            'cac180b7","insight_property_id":"65b01610e99b77f116c0e329","zoom":'
            '{"secret":"yourSecret"},"embed_details":{"powered_by_gumlet_overla'
            'y":true,"allow_drm_protected_videos":true,"preload":true,"autoplay'
            '":false,"logo_width":100,"logo_height":100,"player_color":"#6658ea'
            '","is_seo":true,"dynamic_watermark":false,"watermark_font_size":20'
            ',"watermark_font_color":"#ff0000","watermark_bg_color":"transparen'
            't","watermark_interval":1000,"disable_seek":false,"disable_player_'
            'controls":false,"loop":false,"subtitle_enabled":false},"folders":['
            '],"channel_settings":{"active":false,"privacy_type":"private"}}')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body)

    # An asset refers to a media content/video that is processed, stored, and delivered through Gumlet. This endpoint creates an asset allowing users to ingest media content into the Gumlet system for processing and delivery.
    def test_create_asset(self):
        # Parameters for the API call
        body = None

        # Perform the API call through the SDK function
        result = self.controller.create_asset(body)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('{"asset_id":"65b168a6e99b77f116c0e488","progress":0,"created_at":1'
            '706125479006,"updated_at":1706125479006,"status":"pre-queued","tag'
            '":["ball"],"source_id":"646df1c9173a4a2fcac180b4","collection_id":'
            '"646df1c9173a4a2fcac180b4","input":{"transformations":{"format":"h'
            'ls","resolution":["360p","480p","540p","720p","1080p"],"audio_code'
            'c":["aac"],"video_codec":["libx264"],"thumbnail":["auto"],"thumbna'
            'il_format":"png","mp4_access":false,"per_title_encoding":false},"p'
            'rofile_id":"646df1c9173a4a2fcac180b7","title":"bipbopall","descrip'
            'tion":"some description","metadata":{"headermeta":"metavalue"},"so'
            'urce_url":"http://devimages.apple.com/iphone/samples/bipbop/bipbop'
            'all.m3u8","call_to_actions":[{"start_time":1,"end_time":90,"text":'
            '"some test","url":"https://some-url.com","position_from_top":11,"p'
            'osition_from_right":23,"border_radius":11,"font_color":"#000001","'
            'background_color":"#ffffff","html_target":"_blank"}]},"output":{"f'
            'ormat":"hls","status_url":"https://api.gumlet.com/v1/video/assets/'
            '65b168a6e99b77f116c0e488","playback_url":"https://video.gumlet.io/'
            '646df1c9173a4a2fcac180b4/65b168a6e99b77f116c0e488/main.m3u8","thum'
            'bnail_url":["https://video.gumlet.io/646df1c9173a4a2fcac180b4/65b1'
            '68a6e99b77f116c0e488/thumbnail-1-0.png?v=1706125479006"]},"playlis'
            'ts":["6597acd5ed6f26a9c5ca9633"]}')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body)

    # This endpoint creates a video asset allowing to upload of the video from the local file system and ingest media content into the Gumlet system for processing and delivery.Body Parameters are the same as the Create Asset Body Parameters except for the `input` parameter which this endpoint does not take.A successful response will be returned with `upload_url` field. You can make `PUT` request to that URL to upload video. To upload video using `upload_url` refer to [this](https://docs.gumlet.com/docs/direct-upload#2-use-the-url-to-upload-a-file).
    def test_create_asset_direct_upload(self):
        # Parameters for the API call
        body = APIHelper.json_deserialize('{"collection_id":"646df1c9173a4a2fcac180b4","title":"Sports.","des'
            'cription":"This video provides information about various sports.",'
            '"format":"MP4","tag":["games","field"],"profile_id":"646df1c9173a4'
            'a2fcac180b7","cluster_type":"prod","input":"https://file-examples.'
            'com/wp-content/storage/2017/04/file_example_MP4_480_1_5MG.mp4","pl'
            'aylist_id":"6597acd5ed6f26a9c5ca9633","metadata":"{\"headermeta\":'
            '\"metavalue\"}","call_to_actions":[{"start_time":1,"end_time":90,"'
            'text":"Buy here!!","url":"https://some-buy-url-site.com","position'
            '_from_top":11,"position_from_right":"23","border_radius":"11","fon'
            't_color":"#000001","background_color":"#ffffff"}]}', VideoAssetsUploadRequest.from_dictionary)

        # Perform the API call through the SDK function
        result = self.controller.create_asset_direct_upload(body)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('{"asset_id":"65b169dfe99b77f116c0e4aa","progress":0,"created_at":1'
            '706125793055,"updated_at":1706125793055,"status":"upload-pending",'
            '"tag":["games","field"],"source_id":"646df1c9173a4a2fcac180b4","co'
            'llection_id":"646df1c9173a4a2fcac180b4","input":{"transformations"'
            ':{"format":"hls","resolution":["360p","480p","540p","720p","1080p"'
            '],"audio_codec":["aac"],"video_codec":["libx264"],"thumbnail":["au'
            'to"],"thumbnail_format":"png","mp4_access":false,"per_title_encodi'
            'ng":false,"original_deleted":true},"profile_id":"646df1c9173a4a2fc'
            'ac180b7","title":"Sports.","description":"This video provides info'
            'rmation about various sports.","metadata":{"headermeta":"metavalue'
            '"},"source_url":"646df1c9173a4a2fcac180b4/65b169dfe99b77f116c0e4aa'
            '/origin-65b169dfe99b77f116c0e4aa","call_to_actions":[{"start_time"'
            ':1,"end_time":90,"text":"Buy here!!","url":"https://some-buy-url-s'
            'ite.com","html_target":"_blank"}]},"output":{"format":"hls","statu'
            's_url":"https://api.gumlet.com/v1/video/assets/65b169dfe99b77f116c'
            '0e4aa","playback_url":"https://dev-video.gumlet.io/646df1c9173a4a2'
            'fcac180b4/65b169dfe99b77f116c0e4aa/main.m3u8","thumbnail_url":["ht'
            'tps://dev-video.gumlet.io/646df1c9173a4a2fcac180b4/65b169dfe99b77f'
            '116c0e4aa/thumbnail-1-0.png?v=1706125793055"]},"upload_url":"https'
            '://gumlet-video-user-uploads.s3-accelerate.dualstack.amazonaws.com'
            '/gumlet-user-uploads-dev-deletable/646df1c9173a4a2fcac180b4/65b169'
            'dfe99b77f116c0e4aa/origin-65b169dfe99b77f116c0e4aa?X-Amz-Algorithm'
            '=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Cred'
            'ential=AKIA4WNLTXWDAC3AKBPV%2F20240124%2Fus-west-2%2Fs3%2Faws4_req'
            'uest&X-Amz-Date=20240124T194953Z&X-Amz-Expires=3600&X-Amz-Signatur'
            'e=b724bd728efd589ec6cb4d0fab17947448c02788823619433720e8fddf0f1155'
            '&X-Amz-SignedHeaders=host&x-id=PutObject","playlists":["6597acd5ed'
            '6f26a9c5ca9633"]}')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body)

    # This endpoint allows users to update video asset that has previously been created.
    def test_update_asset(self):
        # Parameters for the API call
        body = None

        # Perform the API call through the SDK function
        result = self.controller.update_asset(body)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('{}')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body)

    # This endpoint gives usage analytics data of your videos. Ex - top assets, bandwidth consumption
    def test_video_analytics(self):
        # Parameters for the API call
        body = None

        # Perform the API call through the SDK function
        result = self.controller.video_analytics(body)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('{"top_assets":[{"collection_id":"<COLLECTION_ID>","asset_id":"<ASS'
            'ET_ID>","units":162870,"collection_name":"<COLLECTION_NAME>"},{"co'
            'llection_id":"<COLLECTION_ID>","asset_id":"<ASSET_ID>","units":213'
            '48,"collection_name":"<COLLECTION_NAME>"},{"collection_id":"<COLLE'
            'CTION_ID>","asset_id":"<ASSET_ID>","units":1239,"collection_name":'
            '"<COLLECTION_NAME>"},{"collection_id":"<COLLECTION_ID>","asset_id"'
            ':"<ASSET_ID>","units":974,"collection_name":"<COLLECTION_NAME>"},{'
            '"collection_id":"<COLLECTION_ID>","asset_id":"<ASSET_ID>","units":'
            '124,"collection_name":"<COLLECTION_NAME>"}]}')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body)

    # Gumlet provides the functionality of creating multiple video assets using the same set of parameters. A Video profile is a set of parameters that can be referenced/used while creating a video as a single parameter.
    def test_create_profile(self):
        # Parameters for the API call
        body = None

        # Perform the API call through the SDK function
        result = self.controller.create_profile(body)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('{"profile_id":"61921fb10822a81d955d1730","name":"Gumlet-Profile-1"'
            ',"transformations":{"format":"hls","audio_codec":["aac"],"video_co'
            'dec":["libx264"],"thumbnail":["auto"],"thumbnail_format":"png","mp'
            '4_access":false,"per_title_encoding":true},"created_at":1636966321'
            '742}')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body)

    # Create Playlist
    def test_create_playlist(self):
        # Parameters for the API call
        body = APIHelper.json_deserialize('{"title":"Playlist-Title","description":"This is description for p'
            'laylist.","collection_id":"{{video-source-id}}"}', VideoPlaylistRequest.from_dictionary)

        # Perform the API call through the SDK function
        result = self.controller.create_playlist(body)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('{"id":"659693cadc46251d898930f2","collection_id":"646df1c9173a4a2f'
            'cac180b4","title":"Playlist-Title","description":"This is descript'
            'ion for playlist.","player_config":{"preload":false,"autoplay":fal'
            'se,"disable_seek":false,"disable_player_controls":false,"powered_b'
            'y_gumlet_overlay":false,"allow_drm_protected_videos":false,"loop":'
            'false,"player_color":"#6658ea","include_seo":true,"subtitle_enable'
            'd":false,"pixel_tags":{},"logo_width":100,"logo_height":100,"dynam'
            'ic_watermark":false,"watermark_font_size":20,"watermark_font_color'
            '":"#ff0000","watermark_bg_color":"transparent","watermark_interval'
            '":1000}}')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body)

    # Get all playlists
    def test_get_all_playlists(self):
        # Parameters for the API call
        collection_id = None

        # Perform the API call through the SDK function
        result = self.controller.get_all_playlists(collection_id)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('[{"id":"6566ebd57499c676fe302bfc","collection_id":"646df1c9173a4a2'
            'fcac180b4","title":"Playlist-1","description":"This is updated des'
            'cription","player_config":{}},{"id":"65802cc5bda4c3f74c99eacf","co'
            'llection_id":"646df1c9173a4a2fcac180b4","title":"Playlist-2","play'
            'er_config":{}},{"id":"65802cc6bda4c3f74c99eae5","collection_id":"6'
            '46df1c9173a4a2fcac180b4","title":"Playlist-3","player_config":{}}]'
            '')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body)

    # Create Webhook
    def test_create_webhook(self):
        # Parameters for the API call
        body = None

        # Perform the API call through the SDK function
        result = self.controller.create_webhook(body)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('{"id":"65eed75eadeea8478f14ebd4","url":"https://webhook.site/16df0'
            '65a-b398-48bc-b825-b0804979c5f1","triggers":["status"],"created_at'
            '":"2024-03-11T10:05:18.316Z","updated_at":"2024-03-11T10:05:18.316'
            'Z","sources":["5f462c1561cf8a766464ffc4"],"secret_token":"rnVNfIKg'
            'nH"}')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body)

    # This endpoint retrieves metrics data to plot the chart.
    def test_insights_chart_data(self):
        # Parameters for the API call
        body = None

        # Perform the API call through the SDK function
        result = self.controller.insights_chart_data(body)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('{"views":[{"x":1647475200000,"y":null,"unit":"views"},{"x":1647561'
            '600000,"y":null,"unit":"views"},{"x":1647648000000,"y":6,"unit":"v'
            'iews"},{"x":1647734400000,"y":24,"unit":"views"},{"x":164782080000'
            '0,"y":33,"unit":"views"},{"x":1647907200000,"y":16,"unit":"views"}'
            '],"unique_views":[{"x":1647475200000,"y":null,"unit":"users"},{"x"'
            ':1647561600000,"y":null,"unit":"users"},{"x":1647648000000,"y":1,"'
            'unit":"users"},{"x":1647734400000,"y":1,"unit":"users"},{"x":16478'
            '20800000,"y":1,"unit":"users"},{"x":1647907200000,"y":1,"unit":"us'
            'ers"}]}')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body)

    # This endpoint retrieves distribution data of a given breakdown value for a given metric.
    def test_insights_breakdown_data(self):
        # Parameters for the API call
        body = None

        # Perform the API call through the SDK function
        result = self.controller.insights_breakdown_data(body)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('{"views":{"data":[{"key":"com.reactnativesdkdev","value":79,"unit"'
            ':"views"}],"has_next_page":false,"current_page":1}}')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body)

    # This endpoint retrieves aggregated data of the given metrics.
    def test_insights_aggregated_data(self):
        # Parameters for the API call
        body = None

        # Perform the API call through the SDK function
        result = self.controller.insights_aggregated_data(body)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('{"views":{"sum":{"value":79,"unit":"views"}}}')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body)

    # This endpoint allows users to create image source.
    def test_create_image_source(self):
        # Parameters for the API call
        body = None

        # Perform the API call through the SDK function
        result = self.controller.create_image_source(body)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('{"id":"65b01610e99b77f116c0e32b","name":"zoom-collection","type":"'
            'zoom","created_at":"2024-01-23T19:40:00.447Z","updated_at":"2024-0'
            '1-23T19:40:00.447Z","video_protection":{},"player_config":{"preloa'
            'd":true,"autoplay":false,"disable_seek":false,"disable_player_cont'
            'rols":false,"powered_by_gumlet_overlay":true,"allow_drm_protected_'
            'videos":true,"loop":false,"player_color":"#6658ea","include_seo":t'
            'rue,"subtitle_enabled":false,"pixel_tags":{},"logo_width":100,"log'
            'o_height":100,"dynamic_watermark":false,"watermark_font_size":20,"'
            'watermark_font_color":"#ff0000","watermark_bg_color":"transparent"'
            ',"watermark_interval":1000},"default_profile_id":"646df1c9173a4a2f'
            'cac180b7","insight_property_id":"65b01610e99b77f116c0e329","zoom":'
            '{"secret":"yourSecret"},"embed_details":{"powered_by_gumlet_overla'
            'y":true,"allow_drm_protected_videos":true,"preload":true,"autoplay'
            '":false,"logo_width":100,"logo_height":100,"player_color":"#6658ea'
            '","is_seo":true,"dynamic_watermark":false,"watermark_font_size":20'
            ',"watermark_font_color":"#ff0000","watermark_bg_color":"transparen'
            't","watermark_interval":1000,"disable_seek":false,"disable_player_'
            'controls":false,"loop":false,"subtitle_enabled":false},"folders":['
            '],"channel_settings":{"active":false,"privacy_type":"private"}}')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body)

    # This endpoint list image sources which are assigned to the user or token.
    def test_list_sources(self):

        # Perform the API call through the SDK function
        result = self.controller.list_sources()

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('{"all_sources":[{"id":"646df1c9173a4a2fcac180b4","name":"collectio'
            'n_name","type":"aws","created_at":"2023-05-24T11:15:21.624Z","upda'
            'ted_at":"2024-01-24T11:57:48.744Z","video_protection":{"signed_url'
            '":true,"signed_url_secret":"47a3e2fbb1318f033b882c632bc103a8"},"pl'
            'ayer_config":{"preload":false,"autoplay":false,"disable_seek":fals'
            'e,"disable_player_controls":false,"powered_by_gumlet_overlay":fals'
            'e,"allow_drm_protected_videos":false,"loop":false,"player_color":"'
            '#6658ea","include_seo":true,"subtitle_enabled":false,"pixel_tags":'
            '{},"logo_width":100,"logo_height":100,"dynamic_watermark":false,"w'
            'atermark_font_size":20,"watermark_font_color":"#ff0000","watermark'
            '_bg_color":"transparent","watermark_interval":1000},"default_profi'
            'le_id":"646df1c9173a4a2fcac180b7","insight_property_id":"646df0aa1'
            '73a4a2fcac18009","aws":{"bucket_name":"asd","bucket_region":"ap-so'
            'uth-1","access_key":"Code@123","secret":"****************"},"embed'
            '_details":{"pixel_tags":{},"preload":false,"autoplay":false,"logo_'
            'width":100,"logo_height":100,"player_color":"#6658ea","is_seo":tru'
            'e,"dynamic_watermark":false,"disable_seek":false,"disable_player_c'
            'ontrols":false,"allow_drm_protected_videos":false,"powered_by_guml'
            'et_overlay":false,"loop":false,"subtitle_enabled":false,"watermark'
            '_bg_color":"transparent","watermark_font_color":"#ff0000","waterma'
            'rk_font_size":20,"watermark_interval":1000},"folders":["folder","f'
            'older 2","folder 27","folder 4"],"channel_settings":{"title":"my c'
            'hannel","active":false,"description":"desc","privacy_type":"privat'
            'e","custom_logo":true,"logo_url":"https://dev-video.gumlet.io/646d'
            'f1c9172a4a2fcac180b4/channel/logo.png","cname":["okj.com","sd.com"'
            ',"safd.com"],"temp_cname":["okj.com","safd.com","sd.com"]}},{"id":'
            '"65b016f4e99b77f116c0e381","name":"private uploads","type":"direct'
            '-upload","created_at":"2024-01-23T19:43:48.267Z","updated_at":"202'
            '4-01-23T19:43:48.272Z","video_protection":{},"player_config":{"pre'
            'load":true,"autoplay":false,"disable_seek":false,"disable_player_c'
            'ontrols":false,"powered_by_gumlet_overlay":true,"allow_drm_protect'
            'ed_videos":true,"loop":false,"player_color":"#6658ea","include_seo'
            '":true,"subtitle_enabled":false,"pixel_tags":{},"logo_width":100,"'
            'logo_height":100,"dynamic_watermark":false,"watermark_font_size":2'
            '0,"watermark_font_color":"#ff0000","watermark_bg_color":"transpare'
            'nt","watermark_interval":1000},"default_profile_id":"646df1c9173a4'
            'a2fcac180b7","insight_property_id":"65b016f4e99b77f116c0e37f","emb'
            'ed_details":{"pixel_tags":{},"powered_by_gumlet_overlay":true,"all'
            'ow_drm_protected_videos":true,"preload":true,"autoplay":false,"log'
            'o_width":100,"logo_height":100,"player_color":"#6658ea","is_seo":t'
            'rue,"dynamic_watermark":false,"watermark_font_size":20,"watermark_'
            'font_color":"#ff0000","watermark_bg_color":"transparent","watermar'
            'k_interval":1000,"disable_seek":false,"disable_player_controls":fa'
            'lse,"loop":false,"subtitle_enabled":false},"folders":[],"channel_s'
            'ettings":{"active":false,"privacy_type":"private"}}]}')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body)

    # This endpoint help you get analytics data.
    def test_image_analytics(self):
        # Parameters for the API call
        body = None

        # Perform the API call through the SDK function
        result = self.controller.image_analytics(body)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('{"top_assets":[{"collection_id":"<COLLECTION_ID>","asset_id":"<ASS'
            'ET_ID>","units":162870,"collection_name":"<COLLECTION_NAME>"},{"co'
            'llection_id":"<COLLECTION_ID>","asset_id":"<ASSET_ID>","units":213'
            '48,"collection_name":"<COLLECTION_NAME>"},{"collection_id":"<COLLE'
            'CTION_ID>","asset_id":"<ASSET_ID>","units":1239,"collection_name":'
            '"<COLLECTION_NAME>"},{"collection_id":"<COLLECTION_ID>","asset_id"'
            ':"<ASSET_ID>","units":974,"collection_name":"<COLLECTION_NAME>"},{'
            '"collection_id":"<COLLECTION_ID>","asset_id":"<ASSET_ID>","units":'
            '124,"collection_name":"<COLLECTION_NAME>"}]}')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body)

    # A live asset refers to a media content/video that is live-streamed through Gumlet. This endpoint creates a live streaming asset allowing users to live stream a video that will be pushed to Gumlet.
    def test_create_live_asset(self):
        # Parameters for the API call
        body = None

        # Perform the API call through the SDK function
        result = self.controller.create_live_asset(body)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('{"status":"created","stream_key":"619231610822a81d955d22f4","live_'
            'asset_id":"619231610822a81d955d22f3","live_video_source_id":"61652'
            '47368d80232d28d4379","input":{"resolution":["720p"]},"stream_url":'
            '"rtmp://livestream-ingest.gumlet.io:1935/app/619231610822a81d955d2'
            '2f4","output":{"playback_url":"https://video.gumlet.io/6165247368d'
            '80232d28d4379/619231610822a81d955d22f3/master.m3u8"},"created_at":'
            '1636970849188,"updated_at":1636970849188}')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body)

    # A live asset refers to a media content/video that is live-streamed through Gumlet. This endpoint allows user to update a live streaming asset.
    def test_create_live_asset_copy(self):
        # Parameters for the API call
        body = None

        # Perform the API call through the SDK function
        result = self.controller.create_live_asset_copy(body)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('{"status":"created","stream_key":"619231610822a81d955d22f4","live_'
            'asset_id":"619231610822a81d955d22f3","live_video_source_id":"61652'
            '47368d80232d28d4379","input":{"resolution":["720p"]},"stream_url":'
            '"rtmp://livestream-ingest.gumlet.io:1935/app/619231610822a81d955d2'
            '2f4","output":{"playback_url":"https://video.gumlet.io/6165247368d'
            '80232d28d4379/619231610822a81d955d22f3/master.m3u8"},"created_at":'
            '1636970849188,"updated_at":1636970849188}')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body)

